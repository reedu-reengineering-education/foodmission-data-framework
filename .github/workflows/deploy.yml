name: Deploy to Environments

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Replace image tag in deployment manifest
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/staging/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/namespace.yaml
          kubectl apply -f k8s/staging/configmap.yaml
          kubectl apply -f k8s/staging/secrets.yaml
          kubectl apply -f k8s/staging/deployment.yaml
          kubectl apply -f k8s/staging/service.yaml
          kubectl apply -f k8s/staging/ingress.yaml

          # Wait for deployment to be ready
          kubectl rollout status deployment/foodmission-data-framework -n foodmission-staging --timeout=300s

      - name: Run database migrations
        run: |
          kubectl run migration-job-${{ github.sha }} \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --restart=Never \
            --namespace=foodmission-staging \
            --env="DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}" \
            --command -- npm run db:migrate:deploy

          # Wait for migration to complete
          kubectl wait --for=condition=complete job/migration-job-${{ github.sha }} -n foodmission-staging --timeout=300s

          # Clean up migration job
          kubectl delete job migration-job-${{ github.sha }} -n foodmission-staging

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30

          # Get service URL
          SERVICE_URL=$(kubectl get ingress foodmission-data-framework -n foodmission-staging -o jsonpath='{.spec.rules[0].host}')

          # Run basic health check
          curl -f https://$SERVICE_URL/health || exit 1

          # Run API smoke tests
          curl -f https://$SERVICE_URL/api/v1/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: [deploy-staging]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Replace image tag in deployment manifest
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/production/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/production/namespace.yaml
          kubectl apply -f k8s/production/configmap.yaml
          kubectl apply -f k8s/production/secrets.yaml
          kubectl apply -f k8s/production/deployment.yaml
          kubectl apply -f k8s/production/service.yaml
          kubectl apply -f k8s/production/ingress.yaml
          kubectl apply -f k8s/production/hpa.yaml

          # Wait for deployment to be ready
          kubectl rollout status deployment/foodmission-data-framework -n foodmission-production --timeout=600s

      - name: Run database migrations
        run: |
          kubectl run migration-job-${{ github.sha }} \
            --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --restart=Never \
            --namespace=foodmission-production \
            --env="DATABASE_URL=${{ secrets.DATABASE_URL_PRODUCTION }}" \
            --command -- npm run db:migrate:deploy

          # Wait for migration to complete
          kubectl wait --for=condition=complete job/migration-job-${{ github.sha }} -n foodmission-production --timeout=600s

          # Clean up migration job
          kubectl delete job migration-job-${{ github.sha }} -n foodmission-production

      - name: Run production smoke tests
        run: |
          # Wait for service to be ready
          sleep 60

          # Get service URL
          SERVICE_URL=$(kubectl get ingress foodmission-data-framework -n foodmission-production -o jsonpath='{.spec.rules[0].host}')

          # Run comprehensive health checks
          curl -f https://$SERVICE_URL/health || exit 1
          curl -f https://$SERVICE_URL/api/v1/health || exit 1
          curl -f https://$SERVICE_URL/metrics || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "üöÄ Application deployed to production environment"
          echo "üìä Monitoring: Check metrics and logs for application health"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed, initiating rollback..."
          kubectl rollout undo deployment/foodmission-data-framework -n foodmission-production
          kubectl rollout status deployment/foodmission-data-framework -n foodmission-production --timeout=300s
          echo "üîÑ Rollback completed"
