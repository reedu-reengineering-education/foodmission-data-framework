name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            VERSION="$INPUT_VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi

          # Save changelog to file
          echo "## Changes" > changelog.md
          echo "$CHANGELOG" >> changelog.md

          # Set output for GitHub release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Create source archive
        run: |
          tar -czf foodmission-data-framework-${{ needs.create-release.outputs.version }}-source.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=dist \
            --exclude=coverage \
            .

      - name: Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./foodmission-data-framework-${{ needs.create-release.outputs.version }}-source.tar.gz
          asset_name: foodmission-data-framework-${{ needs.create-release.outputs.version }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=FOODMISSION Data Framework
            org.opencontainers.image.description=Backend API for food-related data management
            org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release-artifacts]
    environment: production
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy release to production
        run: |
          # Update deployment with release tag
          sed -i "s|IMAGE_TAG|${{ needs.create-release.outputs.version }}|g" k8s/production/deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/production/

          # Wait for deployment to be ready
          kubectl rollout status deployment/foodmission-data-framework -n foodmission-production --timeout=600s

      - name: Run post-deployment tests
        run: |
          # Wait for service to be ready
          sleep 60

          # Get service URL
          SERVICE_URL=$(kubectl get ingress foodmission-data-framework -n foodmission-production -o jsonpath='{.spec.rules[0].host}')

          # Run comprehensive health checks
          curl -f https://$SERVICE_URL/health || exit 1
          curl -f https://$SERVICE_URL/api/v1/health || exit 1
          curl -f https://$SERVICE_URL/metrics || exit 1

      - name: Notify release deployment
        if: success()
        run: |
          echo "üéâ Release ${{ needs.create-release.outputs.version }} successfully deployed to production!"
          echo "üîó GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"
          echo "üê≥ Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}"
