// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  id               String             @id @default(uuid())
  name             String
  description      String?
  barcode          String?            @unique
  openFoodFactsId  String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  createdBy        String
  ShoppingListItem ShoppingListItem[]
  PantryItem       PantryItem[]

  @@index([name])
  @@index([createdAt])
  @@map("foods")
}

model User {
  id           String         @id @default(uuid())
  keycloakId   String         @unique
  email        String         @unique
  firstName    String
  lastName     String
  preferences  Json           @default("{}") // Flexible JSON for app-specific preferences
  settings     Json           @default("{}") // Flexible JSON for app-specific settings
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ShoppingList ShoppingList[]
  Pantry       Pantry[]

  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model ShoppingList {
  id        String   @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User               @relation(fields: [userId], references: [id])
  items ShoppingListItem[]

  @@unique([userId, title])
  @@index([userId])
}

model ShoppingListItem {
  id             String  @id @default(uuid())
  quantity       Int     @default(1)
  unit           String  @default("pieces")
  notes          String?
  checked        Boolean @default(false)
  shoppingListId String
  foodId         String

  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  food         Food         @relation(fields: [foodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([shoppingListId, foodId])
  @@index([shoppingListId])
  @@map("shopping_list_items")
}

model Pantry {
  id        String   @id @default(uuid())
  userId    String   @unique
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User         @relation(fields: [userId], references: [id])
  items PantryItem[]

  @@unique([userId, title])
  @@index([userId])
}

model PantryItem {
  id         String    @id @default(uuid())
  quantity   Int       @default(1)
  unit       String    @default("pieces")
  notes      String?
  expiryDate DateTime?
  pantryId   String
  foodId     String

  pantry Pantry @relation(fields: [pantryId], references: [id], onDelete: Cascade)
  food   Food   @relation(fields: [foodId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pantryId])
  @@map("pantry_items")
}
