apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: foodmission-api-ingress
  namespace: foodmission
  labels:
    app.kubernetes.io/name: foodmission-data-framework
    app.kubernetes.io/component: ingress
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/proxy-body-size: '10m'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '30'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '30'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '30'

    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: '100'
    nginx.ingress.kubernetes.io/rate-limit-window: '1m'

    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/cors-allow-methods: 'GET, POST, PUT, DELETE, OPTIONS'
    nginx.ingress.kubernetes.io/cors-allow-headers: 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization'

    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self';" always;

    # Health check configuration
    nginx.ingress.kubernetes.io/upstream-health-check: 'true'
    nginx.ingress.kubernetes.io/upstream-health-check-path: '/health/ready'
    nginx.ingress.kubernetes.io/upstream-health-check-interval: '10s'
    nginx.ingress.kubernetes.io/upstream-health-check-timeout: '5s'

    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: 'letsencrypt-prod'

spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - api.foodmission.example.com
      secretName: foodmission-api-tls
  rules:
    - host: api.foodmission.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
          - path: /health
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80

---
# Internal ingress for monitoring and admin access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: foodmission-api-internal-ingress
  namespace: foodmission
  labels:
    app.kubernetes.io/name: foodmission-data-framework
    app.kubernetes.io/component: ingress-internal
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
    nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'

    # Restrict access to internal networks only
    nginx.ingress.kubernetes.io/whitelist-source-range: '10.0.0.0/8,172.16.0.0/12,192.168.0.0/16'

    # Basic auth for admin endpoints (optional)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: foodmission-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'FOODMISSION Admin Access'

spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - admin.foodmission.internal
      secretName: foodmission-admin-tls
  rules:
    - host: admin.foodmission.internal
      http:
        paths:
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
          - path: /health
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
          - path: /api/docs
            pathType: Prefix
            backend:
              service:
                name: foodmission-api-service
                port:
                  number: 80
